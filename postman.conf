// pre-request
pm.variables.set('vars', {});
const noAuth = pm.request.headers.has('noAuth');
// 过滤不需要token的请求
if (!noAuth && !/(login|registe|sms-send|web)/.test(pm.request.url.getPath())) {
    const token = pm.environment.get('token');
    if (token) {
        pm.request.addHeader({
            key: 'Authorization',
            value: 'Bearer ' + token
        })
    }
}


// tests
function dataGet(target, keys, value = null) {
  if (!keys || target === null || target === undefined) {
    return target || value;
  }

  keys = Array.isArray(keys) ? keys : keys.split(".");

  if (keys.length === 0) {
    return target || value;
  }

  let key;

  for (let i = 0, l = keys.length; i < l; ++i) {
    key = keys[i];
    if (Array.isArray(target)) {
      target = target[key];
    } else if (target !== null && typeof target === "object") {
      target = target[key];
    } else {
      return value;
    }
  }

  return target || value;
}
pm.test("Status code is 200", function () {
    pm.response.to.have.status(200);
    pm.test("success", function () {
        const authheader = postman.getResponseHeader('Authorization');
        if (authheader) {
            const token = authheader.split(' ')[1]
            pm.test('update token:'+ token, function () {
                pm.environment.set('token', token);
            })
        }
        var jsonData = pm.response.json();
        pm.expect(jsonData.code).to.eql(0);
        var data = jsonData.data;

        // 读取变量配置，根据配置表更新环境变量
        var variable_configs = pm.variables.get('vars');
        if (data === null || data === undefined || typeof variable_configs !== 'object' || data.items === null) {
            return true;
        }

        // // 判断返回分页数据
        // if (data.total !== undefined && data.items) {
        //     data = data.items ? data.items[0] : null;
        // }
        // if (data.length !== undefined) {
        //     data = data.length ? data[0] : null;
        // }
        // if (data.result && Array.isArray(data.result)) {
        //     data = data.result[0]
        // }
        // 读取返回数量更新环境变量
        for (let [key, prop] of Object.entries(variable_configs)) {
            if (key[0] === '$') continue;
            // let props = prop.split('.');
            // let value = data;
            // for (let i = 0, l = props.length; i < l && value !== null; i++) {
            //     value = value[props[i]] || null;
            // }
            let value = dataGet(data, prop, null)
            if (value === null) {
                prop = (data.total !== undefined && data.items) ? `items.0.${prop}`: `result.0.${prop}`
                value = dataGet(data, prop)
            }
            // 循环更新环境变量
            pm.test(key + ' updated to:' + value, function () {
                pm.expect(value).to.not.be.a('null');
                pm.environment.set(key, value);
            });
        }

        // 检查慢查询
        if (!jsonData._debugbar) {
            // 未开启debugger
            return;
        }
        let queries = jsonData._debugbar.queries;
        let warnings = [];
        // 查询sql数量
        if (queries.nb_statements > 30 && variable_configs.$warning_statment !== false) {
            warnings.push('SQL查询语句过多');
        }

        // 检查查询总时间
        if (queries.accumulated_duration > 1 && variable_configs.$warning_duration !== false) {
            warnings.push('SQL查询时间过长');
        }
        for (let sql of queries.statements) {
            // sql慢查询
            if (sql.duration > 0.5) {
                warnings.push('发现SQL慢查询！');
            }
        }
        if (warnings.length > 0) {
            pm.test(warnings.join(';'), function () {
                pm.expect(warnings.length).to.eq(0);
            });
        }
    });

})
